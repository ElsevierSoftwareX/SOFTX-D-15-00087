function [cdata,input,raw] =  xread(cdata,input)
%   [cdata,input,raw] = XREAD(cdata,input) reads xSPDE data files. 
%   Input:  xSPDE 'filename' from cdata or input
%   If cdata is empty, reads first 'in.file' named in 'input'. 
%   If cdata is 'fname', reads file 'fname'. 
%   If cdata is numeric, returns cell 'cdata' used for graphs.
%   Output: mean data cell array 'cdata','input' parameter cell array.
%   Optional: 'raw' trajectories from a file. 
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License.txt

raw={};                                        %%initialize raw data
if ischar(cdata)                               %%if data is character
    if ~isempty (cdata)                        %%check if data is label
        fname=cdata;                           %%store label
    else                                       %%end check if data is label
        fname=input{1}.file;                   %%store label
    end                                        %%end if data is character
    cdata = {};                                %%set data to cell
else                                           %%else data not character
    return;                                    %%return original data
end                                            %%end check if data empty
hflag = xreadname(fname);                      %%check filename is OK
if hflag == -1                                 %%if filename not OK 
    return;                                    %%return to xgraph 
end                                            %%end if filename 
if hflag == 0                                  %%if filename  Matlab type 
    load(fname);                               %%load file data
    try                                        %%test Matlab filename
        v = input{1}.version;                  %%get version name
        fprintf('Reading Matlab file %s generated by %s\n',fname,v);
    catch                                      %%error in file filename
        fprintf('Warning in xread: file %s is not an xSPDE file\n', fname);
    end
    return;                                    %%return to xgraph
end                                            %%end test Matlab filename
try                                            %%test HDF5 filename
    v = h5readatt(fname,'/','xSPDE_version');  %%get version name
    fprintf('Reading HDF5 file %s generated by %s\n', fname,v);
catch                                          %%error in file filename
    fprintf('Warning in xread: file %s is not an xSPDE file\n', fname);
end                                            %%end test HDF5 filename
sequence = h5readatt(fname,'/','Sequence');    %%define sequence number
for s = 1:sequence                             %%loop over sequence
    in = struct;                               %%define structure
    if s <= length(input)
        in = input{s};
    end
    seq = sprintf('/data/sequence_%d',s);      %%name for sequence  
    graphs = h5readatt(fname, seq, 'Graphs');  %%define graph number
    for g = 1:graphs                           %%loop over graphs
        graphname = sprintf('/graph_%d',g);
        dsname = [seq graphname]; 
        cdata{s}(:,:,:,g)= h5read(fname,dsname);
    end                                        %%end loop graphs
    info = h5info(fname, [seq '/input']);
    in=xh5attributes(info,in);
    for i = 1:size(info.Groups, 1)
        gName_full = info.Groups(i).Name;
        gName = xcut_off_path(gName_full);
        info_sgroup = h5info(fname, gName_full); %info field for subgroup,
        struct_tmp = xh5attributes(info_sgroup,[]);
        struct_tmp_fnames = fieldnames(struct_tmp);
        cell_tmp = cell(1, numel(struct_tmp_fnames));        
        for j = 1:numel(struct_tmp_fnames)
            fname_tmp = sprintf('%s_%d', gName, j);
            cell_tmp{j} = struct_tmp.(fname_tmp);
        end
        if ~isfield(in,gName)                    %% If no label present
            in.(gName) = cell_tmp;               %% Load file parameters
        end
    end 
   input{s} = in;
end                                            %%end loop sequence
end

function [res] = xcut_off_path(str)
%   XCUT_OFF_PATH(str) removes path data from an HDF5 group name
%   Output: HDF5 group name without path data. 
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License.txt
    C = strsplit(str,'/');
    res = C{size(C,2)};
end
    
function [in] = xh5attributes(info, in)
%   XH5ATTRIBUTES(info, in) reads HDF5 attribute data.
%   Output: HDF5 file attributes in 'in' including function data
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License.txt
 
    for i = 1:size(info.Attributes,1)
        aName  = info.Attributes(i).Name;
        aValue = info.Attributes(i).Value;
        if ~ischar(aValue)
            aValue = aValue';
        else
            len = length (aValue);
            if (len > 9) && strcmp('function_',aValue(1:9))
                aValue =str2func(aValue(10:len));
            end
        end
        if ~isfield(in,aName)                    %% If no label present
            in.(aName) = aValue;
        end
    end
end

function hflag = xreadname(filename)
%   [filename,hflag] = XREADNAME(in_fname) 
%   Tests for a valid input filename for reading.
%   Returns hflag = 1 if file is an HDF5 file, '.h5';
%   Returns hflag = 0 if file is a matlab file, '.mat';
%   Returns hflag = -1 if file does not exist or invalid.
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License.txt
 
hflag = -1;
[~,~,ext] = fileparts(filename);
if strcmp(ext, '.h5')
    hflag = 1;
end 
if strcmp(ext, '.mat')
    hflag = 0;
end 
if hflag == -1
    fprintf('Error in xreadname: file %s invalid type\n', filename);
    hflag = -1;
end
if ~exist(filename, 'file')
    fprintf('Error in xreadname: file %s doesn''t exist\n', filename);
    hflag = -1;
end
end
